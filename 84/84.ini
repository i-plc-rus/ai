84
Уровень кандидата: Высокий

Уверенные знания и навыки работы с машинным обучением, анализом данных и визуализацией. Кандидат использует различные методы анализа, от группировки данных до визуализаций (гистограммы, коробчатые диаграммы, парные графики и матрицы корреляции). Также кандидат использует sklearn для вычисления метрик качества моделей и обучения нескольких моделей.

Кандидат использует расширенные возможности seaborn и matplotlib для визуализации данных и метрик, а также глубоко работает с train_test_split, class_weights, GridSearchCV и многими другими инструментами. Показатели модели оцениваются комплексно с помощью множества метрик (accuracy, precision, recall, F1, ROC-AUC).

Уровень кандидата: Высокий, опытный.

2. Анализ кода
Часть 1: Визуализация и статистика данных
Группировка данных и визуализация:

Кандидат использует groupby для получения распределения целевой переменной относительно других признаков.
Применяет seaborn.barplot для отображения зависимостей между признаками и целевой переменной.
Данные визуализируются для различных признаков: пола, наличия кредитной карты, активности пользователя и других.
Парные графики и матрицы корреляции:

Используется sns.pairplot для анализа числовых признаков по отношению к целевой переменной. Это помогает визуализировать распределения и возможные зависимости между признаками.
Построение матрицы корреляции с помощью sns.heatmap помогает оценить взаимосвязи между признаками, что важно для выбора методов и параметров модели.
Коробчатые диаграммы (boxplot):

Визуализация распределения целевой переменной от признаков с использованием sns.boxplot. Это позволяет выявить возможные выбросы и оценить разницу между классами целевой переменной.
Часть 2: Метрики и модели
Вычисление веса классов:

Использование compute_class_weight для балансировки классов в задаче классификации. Это важно для моделей, когда классы сильно несбалансированы.
Метрики качества модели:

Кандидат пишет функцию print_metrics, которая выводит ключевые метрики (accuracy, precision, recall, F1, ROC-AUC), что позволяет полностью оценить работу моделей.
Обучение моделей:

Три базовые модели — LogisticRegression, RandomForestClassifier и LGBMClassifier — обучаются с учётом веса классов.
Каждая модель оценивается с использованием метрик, что помогает понять, какая из моделей будет более эффективной.
Часть 3: Оптимизация моделей
GridSearchCV и RandomizedSearchCV могли бы быть использованы для поиска гиперпараметров, что добавило бы улучшения в модели. Однако в текущем коде этот шаг опущен.
3. Рекомендации
Возможно, стоит добавить шаги для кросс-валидации с помощью GridSearchCV или RandomizedSearchCV, чтобы найти наилучшие гиперпараметры.
Feature Engineering: Предсказания могут быть улучшены через дополнительные преобразования признаков, такие как нормализация, масштабирование или создание новых признаков.
Рекомендуется учитывать баланс классов в задаче, используя class_weight в моделях.